**solution code 4**
#include <iostream>
using namespace std;

float prob(int N, float P)
{
    double dp[N + 1];
    dp[0] = 1;
    dp[1] = 0;
    dp[2] = P;
    dp[3] = 1 - P;
    for (int i = 4; i <= N; ++i)
        dp[i] = (P)*dp[i - 2] + (1 - P) * dp[i - 3];

    return dp[N];
}

int main()
{
    int n = 8;
    float p = 0.4;
    cout << prob(n, p);
    return 0;
}



**solution code 8**
#include <bits/stdc++.h>
using namespace std;

int findNum(int N, int K)
{
    int rem = (N + K) % K;
    if (rem == 0)
        return N;
    else
        return N + K - rem;
}

int findSmallest(int M, int N)
{    
    int x = findNum(M, N);
    return x - M;
}

int main()
{
    // Given Input
    int M = 1029, N = 52;
    
    // Function Call
    cout << findSmallest(M, N);

    return 0;
}



**solution code 12**
#include <iostream>
#include<math.h>
using namespace std;

void primeFactors(int n)
{
    while (n%2 == 0)
    {
        cout<< 2<<" ";
        n = n/2;
    }

    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        while (n%i == 0)
        {
            cout<< i;
            n = n/i;
        }
    }

    if (n > 2)
        cout<< n;
}


int main()
{
    int n = 12;
    primeFactors(n);
    return 0;
}



**solution code 16**
#include <iostream>
using namespace std;
int checkPrime(int n);
int main() {
  int n, i, flag = 0;
  cout<<"Enter a positive integer: ";
  cin>>n;

  for (i = 2; i <= n / 2; ++i) {
    
    if (checkPrime(i) == 1) {
      
      if (checkPrime(n - i) == 1) {
        cout<< n<<" = "<< i <<" + "<< (n - i)<<endl;
        flag = 1;
      }
    }
  }

  if (flag == 0)
    cout<<n<<"cannot be expressed as the sum of two prime numbers.";

  return 0;
}

int checkPrime(int n) {
  int i, isPrime = 1;

  
  if (n == 0 || n == 1) {
    isPrime = 0;
  }
  else {
    for(i = 2; i <= n/2; ++i) {
      if(n % i == 0) {
        isPrime = 0;
        break;
      }
    }
  }

  return isPrime;
}
